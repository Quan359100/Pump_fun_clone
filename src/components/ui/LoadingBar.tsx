import React, { useEffect } from 'react';
import Image from 'next/image';

interface LoadingBarProps {
  /** gi·ªØ cho t∆∞∆°ng th√≠ch, nh∆∞ng m·∫∑c ƒë·ªãnh s·∫Ω ignore ƒë·ªÉ tr√°nh blur */
  size?: 'small' | 'medium' | 'large';
  color?: string;
  open?: boolean;                 // b·∫≠t/t·∫Øt overlay
  overlayBg?: string;             // n·ªÅn overlay
  zIndex?: number;                // z-index overlay
  hideLabel?: boolean;            // ·∫©n ch·ªØ Loading...
  /** k√≠ch th∆∞·ªõc GIF g·ªëc (px) ƒë·ªÉ hi·ªÉn th·ªã 1:1, tr√°nh nho√® */
  nativeWidth?: number;
  nativeHeight?: number;
  /** n·∫øu v·∫´n mu·ªën √©p k√≠ch th∆∞·ªõc, b·∫≠t c·ªù n√†y (c√≥ th·ªÉ l√†m gi·∫£m ƒë·ªô n√©t) */
  allowResize?: boolean;
}

const LoadingBar: React.FC<LoadingBarProps> = ({
  size = 'medium',
  color = 'var(--primary)',
  open = true,
  overlayBg = 'rgba(0,0,0,0.45)',
  zIndex = 9999,
  hideLabel = false,
  nativeWidth = 150,   // üëâ ch·ªânh ƒë√∫ng theo GIF c·ªßa b·∫°n (v√≠ d·ª•: 150x150)
  nativeHeight = 150,
  allowResize = false, // ‚ùó m·∫∑c ƒë·ªãnh KH√îNG resize ƒë·ªÉ tr√°nh nho√®
}) => {
  useEffect(() => {
    if (!open) return;
    const prev = document.body.style.overflow;
    document.body.style.overflow = 'hidden';
    return () => { document.body.style.overflow = prev; };
  }, [open]);

  if (!open) return null;

  // N·∫øu TH·∫¨T S·ª∞ mu·ªën d√πng size t√πy √Ω, b·∫≠t allowResize = true
  const sizePx = {
    small: 96,
    medium: 150,
    large: 256,
  }[size];

  const w = allowResize ? sizePx : nativeWidth;
  const h = allowResize ? Math.round((nativeHeight / nativeWidth) * w) : nativeHeight;

  return (
    <div
      className="fixed inset-0 grid place-items-center"
      style={{ background: overlayBg, zIndex, backdropFilter: 'blur(2px)' }}
      role="dialog"
      aria-modal="true"
      aria-label="Loading overlay"
    >
      <div className="flex flex-col items-center justify-center gap-3" aria-busy="true">
        {/* ƒê·∫∑t file v√†o public/tree-loader.gif */}
        <Image
          src="/tree-loader.gif"
          alt="Growing tree loader"
          width={w}
          height={h}
          unoptimized        // üî• gi·ªØ GIF g·ªëc, kh√¥ng convert/resize => kh√¥ng nho√®
          priority
          draggable={false}
          style={{
            objectFit: 'contain',
            // N·∫øu v·∫´n resize, gi·ªØ n√©t t·ªëi ƒëa:
            imageRendering: allowResize ? 'crisp-edges' as any : undefined,
          }}
        />
      </div>
    </div>
  );
};

export default LoadingBar;
